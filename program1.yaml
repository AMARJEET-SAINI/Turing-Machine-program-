name: program1
source code: |
  # Adds 1 to a binary number.
  #input: '1011'
  #blank: ' '
  #start state: right
  #table:
    # scan to the rightmost digit
  #  right:
  #    [1,0]: R
  #    ' '  : {L: carry}
    # then carry the 1
  #  carry:
  #    1      : {write: 0, L}
  #    [0,' ']: {write: 1, L: done}
  #  done:


  # Adds 1 to a binary number.
  input: 'aaabbbccc$'
  blank: ' '
  start state: Q1
  table:
    # scan to the rightmost digit
    Q1:
      # TRANS STATE A
      [a,a]  : {write: X,R: Q2}
      [Y,Y]  : {write: Y,R: Q5}
    #[A,X]: R
    # then carry the 1
    
    Q2:
      a      : {write: a, R}
      Y      : {write: Y, R} 
      [b,b]  : {write: Y,R: Q3}
    
    Q3:
      b      : {write: b, R}
      Z      : {write: Z, R} 
      [c,c]  : {write: Z,L: Q4} 
    
    Q4:
      # TRANS STATE A
      a      : {write: a, L}
      Y      : {write: Y, L}
      b      : {write: b, L}
      Z      : {write: Z, L}
      [X,X]  : {write: X,R: Q1}
  #    [0,' ']: {write: 1, L: done}
    
    Q5:
      Y      : {write: Y, R}
      [Z,Z]  : {write: Z,R: Q6}
    Q6:
      Z      : {write: Z, R}
      [$,$]  : {write: $,R: done}
      
    done:

  # Exercises:

  # • Modify the machine to always halt on the leftmost digit
  #   (regardless of the number's length).
  #   Hint: add a state between carry and done.

  # • Make a machine that adds 2 instead of 1.
  #   Hint: 2 is '10' in binary, so the last digit is unaffected.
  #   Alternative hint: chain together two copies of the machine from
  #   the first exercise (renaming the states of the second copy).

  # • Make a machine to subtract 1.
  #   To simplify things, assume the input is always greater than 0.
positions:
  Q1: {x: 45.44, y: 305.73}
  Q2: {x: 241, y: 182.51}
  Q3: {x: 498.72, y: 180.03}
  Q4: {x: 674.96, y: 298.94}
  Q5: {x: 159.91, y: 427.12}
  Q6: {x: 356.82, y: 429.59}
  done: {x: 562.79, y: 432.79}
editor contents: |+
  # L = {a^n b^n c^n | n>=1 ; a,b,c belongs sigma*}
  # equal #a's followed by  equal #b's followed by  equal #c's


  input: 'aaabbbccc$'
  blank: ' '
  start state: Q1
  table:
    # scan to the rightmost digit
    Q1:
      # TRANS STATE A
      [a,a]  : {write: X,R: Q2}
      [Y,Y]  : {write: Y,R: Q5}
    #[A,X]: R
    # then carry the 1
    
    Q2:
      a      : {write: a, R}
      Y      : {write: Y, R} 
      [b,b]  : {write: Y,R: Q3}
    
    Q3:
      b      : {write: b, R}
      Z      : {write: Z, R} 
      [c,c]  : {write: Z,L: Q4} 
    
    Q4:
      # TRANS STATE A
      a      : {write: a, L}
      Y      : {write: Y, L}
      b      : {write: b, L}
      Z      : {write: Z, L}
      [X,X]  : {write: X,R: Q1}
  #    [0,' ']: {write: 1, L: done}
    
    Q5:
      Y      : {write: Y, R}
      [Z,Z]  : {write: Z,R: Q6}
    Q6:
      Z      : {write: Z, R}
      [$,$]  : {write: $,R: done}
      
    done:

